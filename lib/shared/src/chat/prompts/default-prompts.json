{
  "commands": {
    "Document Code": {
      "slashCommand": "doc",
      "prompt": "Generate a comment documenting the parameters and functionality for the selected code. Only generate the documentation for the selected code, do not generate the code. Use the same documentation style in the file of the selected code to generate the comments. Pay attention to the file path of the selected code to make sure the comments are generated for the correct language. For example, use the JavaDoc documentation style to generate comments for .java files, or Python docstring using Python multi-line string for .py files.",
      "context": {
        "currentDir": true,
        "selection": true
      }
    },
    "Explain Code": {
      "slashCommand": "explain",
      "prompt": "Explain what the selected code does in simple terms. Assume the audience is a beginner programmer who has just learned the language features and basic syntax. Focus on explaining: 1) The purpose of the code 2) What input(s) it takes 3) What output(s) it produces 4) How it achieves its purpose through the logic and algorithm. 5) Any important logic flows or data transformations happening. Use simple language a beginner could understand. Include enough detail to give a full picture of what the code aims to accomplish without getting too technical. Format the explanation in coherent paragraphs, using proper punctuation and grammar. Write the explanation assuming no prior context about the code is known. Do not make assumptions about variables or functions not shown in the shared code. Start the answer with the name of the code that is being explained.",
      "context": {
        "currentFile": true
      }
    },
    "Generate Unit Tests": {
      "slashCommand": "test",
      "prompt": "Write unit tests to validate the expected functionality for each function in the selected code. Ensure you cover any example test cases included in comments. If test files already exist, follow similar patterns for imports, setup, and assertions used in those tests. If no tests exist, feel free to import any common test libraries as needed. Focus on testing key behaviors and edge cases. Structure the tests so they are clear, maintainable, and can be run automatically. All generated code must be complete workable code, not fragments.",
      "context": {
        "currentDir": true,
        "currentFile": true,
        "selection": true
      }
    },
    "Code Smell": {
      "slashCommand": "smell",
      "prompt": "Please review and analyze the {languageName} code I have selected and identify potential areas for improvement related to code smells, readability, maintainability, performance, security, etc. Do not list issues already addressed in the given code. Focus on providing up to 5 constructive suggestions that could make the code more robust, efficient, or align with best practices. For each suggestion, provide a brief explanation of the potential benefits. After listing any recommendations, summarize if you found notable opportunities to enhance the code quality overall or if the code generally follows sound design principles. If no issues found, reply 'There are no errors.'"
    }
  }
}
