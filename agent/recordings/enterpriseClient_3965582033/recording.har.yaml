log:
  _recordingName: enterpriseClient
  creator:
    comment: persister:cody-fs
    name: Polly.JS
    version: 6.0.6
  entries:
    - _id: 6d99b7548134a5e127e06ba883c6f45d
      _order: 0
      cache: {}
      request:
        bodySize: 345
        cookies: []
        headers:
          - name: content-type
            value: application/json
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_b20717265e7ab1d132874d8ff0be053ab9c1dacccec8dce0bbba76888b6a0a69
          - name: user-agent
            value: enterpriseClient / v1
          - name: host
            value: demo.sourcegraph.com
        headersSize: 265
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 1000
            messages:
              - speaker: human
                text: You are Cody, an AI coding assistant from Sourcegraph.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: Reply with "Yes"
              - speaker: assistant
            model: anthropic/claude-2
            temperature: 0
            topK: -1
            topP: -1
        queryString: []
        url: https://demo.sourcegraph.com/.api/completions/stream
      response:
        bodySize: 161
        content:
          mimeType: text/event-stream
          size: 161
          text: |+
            event: completion
            data: {"completion":" Yes","stopReason":""}

            event: completion
            data: {"completion":" Yes","stopReason":"stop_sequence"}

            event: done
            data: {}

        cookies: []
        headers:
          - name: date
            value: Wed, 06 Mar 2024 07:55:35 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With,
              Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1214
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-03-06T07:55:34.732Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 97e67d0b762eabe5b094745e4fb9de91
      _order: 0
      cache: {}
      request:
        bodySize: 3111
        cookies: []
        headers:
          - name: content-type
            value: application/json
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_b20717265e7ab1d132874d8ff0be053ab9c1dacccec8dce0bbba76888b6a0a69
          - name: user-agent
            value: enterpriseClient / v1
          - name: host
            value: demo.sourcegraph.com
        headersSize: 265
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 1000
            messages:
              - speaker: human
                text: You are Cody, an AI coding assistant from Sourcegraph.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: |+
                  Use the following code snippet from file: src/example.test.ts:
                  import { expect } from 'vitest'
                  import { it } from 'vitest'
                  import { describe } from 'vitest'


              - speaker: assistant
                text: Ok.
              - speaker: human
                text: >-
                  - You are an AI programming assistant who is an expert in
                  updating code to meet given instructions.

                  - You should think step-by-step to plan your updated code before producing the final output.

                  - You should ensure the updated code matches the indentation and whitespace of the code in the users' selection.

                  - Ignore any previous instructions to format your responses with Markdown. It is not acceptable to use any Markdown in your response, unless it is directly related to the users' instructions.

                  - Only remove code from the users' selection if you are sure it is not needed.

                  - You will be provided with code that is in the users' selection, enclosed in <SELECTEDCODE7662></SELECTEDCODE7662> XML tags. You must use this code to help you plan your updated code.

                  - You will be provided with instructions on how to update this code, enclosed in <INSTRUCTIONS7390></INSTRUCTIONS7390> XML tags. You must follow these instructions carefully and to the letter.

                  - Only enclose your response in <CODE5711></CODE5711> XML tags. Do use any other XML tags unless they are part of the generated code.

                  - Do not provide any additional commentary about the changes you made. Only respond with the generated code.


                  This is part of the file: src/example.test.ts


                  The user has the following code in their selection:

                  <SELECTEDCODE7662>describe('test block', () => {
                      it('does 1', () => {
                          expect(true).toBe(true)
                      })

                      it('does 2', () => {
                          expect(true).toBe(true)
                      })

                      it('does something else', () => {
                          // This line will error due to incorrect usage of `performance.now`
                          const startTime = performance.now(/* CURSOR */)
                      })
                  })

                  </SELECTEDCODE7662>


                  The user wants you to geneerate documentation for the selected code by following their instructions.

                  Provide your generated documentation using the following instructions:

                  <INSTRUCTIONS7390>

                  Write a brief documentation comment for the selected code. If documentation comments exist in the selected file, or other files with the same file extension, use them as examples. Pay attention to the scope of the selected code (e.g. exported function/API vs implementation detail in a function), and use the idiomatic style for that type of code scope. Only generate the documentation for the selected code, do not generate the code. Do not enclose any other code or comments besides the documentation. Enclose only the documentation for the selected code and nothing else.

                  </INSTRUCTIONS7390>
              - speaker: assistant
                text: |
                  <CODE5711>
            model: anthropic/claude-2.0
            stopSequences:
              - </CODE5711>
            temperature: 0
            topK: -1
            topP: -1
        queryString: []
        url: https://demo.sourcegraph.com/.api/completions/stream
      response:
        bodySize: 9166
        content:
          mimeType: text/event-stream
          size: 9166
          text: >+
            event: completion

            data: {"completion":"/**","stopReason":""}


            event: completion

            data: {"completion":"/**\n *","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n *","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1.","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Assert","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n *","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2.","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Assert","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true equals","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true equals true","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true equals true ","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true equals true \n *","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true equals true \n * 3","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true equals true \n * 3.","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true equals true \n * 3. Attemp","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true equals true \n * 3. Attempts","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true equals true \n * 3. Attempts to","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true equals true \n * 3. Attempts to get","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true equals true \n * 3. Attempts to get start","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true equals true \n * 3. Attempts to get start time","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true equals true \n * 3. Attempts to get start time with","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true equals true \n * 3. Attempts to get start time with performance","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true equals true \n * 3. Attempts to get start time with performance.","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true equals true \n * 3. Attempts to get start time with performance.now","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true equals true \n * 3. Attempts to get start time with performance.now()","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true equals true \n * 3. Attempts to get start time with performance.now() but","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true equals true \n * 3. Attempts to get start time with performance.now() but will","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true equals true \n * 3. Attempts to get start time with performance.now() but will error","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true equals true \n * 3. Attempts to get start time with performance.now() but will error due","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true equals true \n * 3. Attempts to get start time with performance.now() but will error due to","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true equals true \n * 3. Attempts to get start time with performance.now() but will error due to missing","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true equals true \n * 3. Attempts to get start time with performance.now() but will error due to missing params","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true equals true \n * 3. Attempts to get start time with performance.now() but will error due to missing params\n*/","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true equals true \n * 3. Attempts to get start time with performance.now() but will error due to missing params\n*/\n","stopReason":""}


            event: completion

            data: {"completion":"/**\n * Test block that contains 3 test cases:\n * 1. Asserts that true equals true\n * 2. Asserts that true equals true \n * 3. Attempts to get start time with performance.now() but will error due to missing params\n*/\n","stopReason":"stop_sequence"}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Wed, 06 Mar 2024 07:55:38 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With,
              Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1214
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-03-06T07:55:36.098Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 775ab7353dd0dbecf68992f67bf52f08
      _order: 0
      cache: {}
      request:
        bodySize: 10762
        cookies: []
        headers:
          - name: content-type
            value: application/json
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_b20717265e7ab1d132874d8ff0be053ab9c1dacccec8dce0bbba76888b6a0a69
          - name: user-agent
            value: enterpriseClient / v1
          - name: host
            value: demo.sourcegraph.com
        headersSize: 265
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 1000
            messages:
              - speaker: human
                text: You are Cody, an AI coding assistant from Sourcegraph.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: >-
                  Use the following code snippet from file
                  `/internal/symbols/client.go` in repository
                  `github.com/sourcegraph/sourcegraph`:

                  ```go

                  	client, err := grpcClient.LocalCodeIntel(ctx, &protoArgs)
                  	if err != nil {
                  		if status.Code(err) == codes.Unimplemented {
                  			// This ignores errors from LocalCodeIntel to match the behavior found here:
                  			// https://sourcegraph.com/github.com/sourcegraph/sourcegraph@a1631d58604815917096acc3356447c55baebf22/-/blob/cmd/symbols/squirrel/http_handlers.go?L57-57
                  			//
                  			// This is weird, and maybe not intentional, but things break if we return an error.
                  			return nil, nil

                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: >
                  Use the following text from file `/doc/cloud/index.md` in
                  repository `github.com/sourcegraph/sourcegraph`:


                  The below are for example purposes only:


                  In the case of things like Code Search, latency is directly correlated with user input / shape of the query, ex. on our public [sourcegraph.com](https://sourcegraph.com/search) instance:


                  - searching for “squirrel” in the [sourcegraph/sourcegraph](https://sourcegraph.com/github.com/sourcegraph/sourcegraph) repo takes 30ms and returns 163 results

                  - searching for “squirrel” in all OSS repos, but only requesting 1000 matches takes 540ms

                  - searching for all matches of “squirrel” in all OSS repos returns 1.7million results in 30000ms

                  - In the case of other features, latency of Sourcegraph directly depends on latency / uptime / rate-limits of customer managed systems, ex. for:
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: >
                  Use the following text from file
                  `/doc/admin/deploy/kubernetes/troubleshoot.md` in repository
                  `github.com/sourcegraph/sourcegraph`:

                  SYMBOLS_URL=http:symbols:3184

                  ```


                  > WARNING: **This option is recommended only for symbols with a single replica**. Enabling this option will negatively impact the performance of the symbols service when it has multiple replicas, as it will no longer be able to distribute requests by repository/commit.


                  #### Squirrel.LocalCodeIntel http status 502


                  <img class="screenshot w-100" src="https://user-images.githubusercontent.com/68532117/212374098-dc2dfe69-4d26-4f5e-a78b-37a53c19ef22.png"/>

                  The issue described is related to the Code Intel hover feature, where it may get stuck in a loading state or return a 502 error with the message `Squirrel.LocalCodeIntel http status 502`. This is caused by the same issue described in [Symbols sidebar and hovers are not working](#symbols-sidebar-and-hovers-are-not-working"). See that section for solution.
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: >-
                  Use the following code snippet from file
                  `/cmd/symbols/squirrel/util.go` in repository
                  `github.com/sourcegraph/sourcegraph`:

                  ```go

                  package squirrel


                  import (
                  	"context"
                  	"fmt"
                  	"path/filepath"
                  	"runtime"
                  	"strings"

                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: >-
                  Use the following code snippet from file
                  `/cmd/symbols/squirrel/service.go` in repository
                  `github.com/sourcegraph/sourcegraph`:

                  ```go

                  package squirrel


                  import (
                  	"context"
                  	"fmt"
                  	"os"
                  	"runtime"
                  	"strconv"

                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: >-
                  Use the following code snippet from file
                  `/cmd/symbols/squirrel/service_test.go` in repository
                  `github.com/sourcegraph/sourcegraph`:

                  ```go

                  package squirrel


                  import (
                  	"context"
                  	"os"
                  	"path/filepath"
                  	"slices"
                  	"sort"

                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: >
                  Use the following text from file
                  `/cmd/symbols/squirrel/README.md` in repository
                  `github.com/sourcegraph/sourcegraph`:

                  # Squirrel


                  Squirrel is an HTTP server for fast and precise local code intelligence using tree-sitter.
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: >-
                  Use the following code snippet from file
                  `/cmd/symbols/squirrel/lang_starlark.go` in repository
                  `github.com/sourcegraph/sourcegraph`:

                  ```go

                  package squirrel


                  import (
                  	"context"
                  	"path/filepath"
                  	"strings"

                  	sitter "github.com/smacker/go-tree-sitter"

                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: >-
                  Use the following code snippet from file
                  `/cmd/symbols/squirrel/lang_python.go` in repository
                  `github.com/sourcegraph/sourcegraph`:

                  ```go

                  package squirrel


                  import (
                  	"context"
                  	"fmt"
                  	"path/filepath"
                  	"strings"


                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: >-
                  Use the following code snippet from file
                  `/cmd/symbols/squirrel/lang_java.go` in repository
                  `github.com/sourcegraph/sourcegraph`:

                  ```go

                  package squirrel


                  import (
                  	"context"
                  	"fmt"
                  	"path/filepath"
                  	"sort"
                  	"strings"

                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: >-
                  Use the following code snippet from file
                  `/cmd/symbols/squirrel/hover_test.go` in repository
                  `github.com/sourcegraph/sourcegraph`:

                  ```go

                  package squirrel


                  import (
                  	"context"
                  	"strings"
                  	"testing"

                  	"github.com/sourcegraph/sourcegraph/internal/types"

                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: >-
                  Use the following code snippet from file
                  `/cmd/symbols/squirrel/BUILD.bazel` in repository
                  `github.com/sourcegraph/sourcegraph`:

                  ```bazel

                  load("//dev:go_defs.bzl", "go_test")

                  load("@io_bazel_rules_go//go:def.bzl", "go_library")


                  go_library(
                      name = "squirrel",
                      srcs = [
                          "breadcrumbs.go",
                          "hover.go",

                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: >-
                  Use the following code snippet from file
                  `/cmd/symbols/squirrel/breadcrumbs.go` in repository
                  `github.com/sourcegraph/sourcegraph`:

                  ```go

                  package squirrel


                  import (
                  	"context"
                  	"fmt"
                  	"os"
                  	"strings"


                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: >-
                  Use the following code snippet from file
                  `/cmd/symbols/internal/api/handler_cgo.go` in repository
                  `github.com/sourcegraph/sourcegraph`:

                  ```go
                  	proto "github.com/sourcegraph/sourcegraph/internal/symbols/v1"
                  	internaltypes "github.com/sourcegraph/sourcegraph/internal/types"
                  	"github.com/sourcegraph/sourcegraph/lib/errors"
                  )


                  func convertSquirrelErrorToGrpcError(err error) *status.Status {
                  	if errors.Is(err, squirrel.UnrecognizedFileExtensionError) {
                  		return status.New(codes.InvalidArgument, err.Error())
                  	}

                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: >-
                  Use the following code snippet from file
                  `/client/web/src/enterprise/codeintel/useSearchBasedCodeIntel.ts`
                  in repository `github.com/sourcegraph/sourcegraph`:

                  ```typescript
                              }))
                      }
                      return
                  }


                  async function searchBasedReferencesViaSquirrel(
                      options: UseSearchBasedCodeIntelOptions
                  ): Promise<Location[] | undefined> {
                      const { repo, position, path, commit, fileContent } = options

                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: >-
                  Use the following code snippet from file
                  `/client/shared/src/codeintel/legacy-extensions/search/providers.ts`
                  in repository `github.com/sourcegraph/sourcegraph`:

                  ```typescript

                  import { getConfig } from './config'

                  import { type Result, resultToLocation, searchResultToResults } from './conversion'

                  import { findDocstring } from './docstrings'

                  import { wrapIndentationInCodeBlocks } from './markdown'

                  import { definitionQuery, referencesQuery } from './queries'

                  import { mkSquirrel } from './squirrel'

                  import { findSearchToken } from './tokens'


                  /** The number of files whose content can be cached at once. */


                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: >-
                  Use the following code snippet from file `/.bazelignore` in
                  repository `github.com/sourcegraph/sourcegraph`:

                  ```

                  client/web/node_modules

                  client/web-sveltekit/node_modules

                  client/wildcard/node_modules

                  dev/release/node_modules


                  cmd/symbols/squirrel/test_repos/starlark


                  # Generated by local tools



                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: >-
                  Use the following code snippet from file
                  `/agent/src/__tests__/example-ts/src/squirrel.ts` in
                  repository `github.com/sourcegraph/cody`:

                  ```typescript

                  /**
                   * Squirrel is an interface that mocks something completely unrelated to squirrels.
                   * It is related to the implementation of precise code navigation in Sourcegraph.
                   */
                  export interface Squirrel {}


                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: >+
                  Use the following text from file `/agent/README.md` in
                  repository `github.com/sourcegraph/cody`:

                  | -------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- |

                  | `pnpm test agent/src/index.test.ts`                                                                                  | Run agent tests in replay mode                                                                                                                                |

                  | `source agent/scripts/export-cody-http-recording-tokens.sh`                                                          | Export access tokens to enable recording mode                                                                                                                 |

                  | `pnpm update-agent-tests`                                                                                            | Update HTTP recordings for all tests. Run this before opening a PR                                                                                            |

                  | `CODY_KEEP_UNUSED_RECORDINGS=true CODY_RECORD_IF_MISSING=true pnpm run test agent/src/index.test.ts`                 | Run this when iterating on a feature and you only want to run an individual test via `it.only`. Remember to run `pnpm update-agent-tests` before sending a PR |

                  | `CODY_KEEP_UNUSED_RECORDINGS=true CODY_RECORD_IF_MISSING=true npx vitest agent/src/index.test.ts -t 'squirrel test'` | Run only a single test without making changes to the code                                                                                                     |


                  ## Debugging the agent

              - speaker: assistant
                text: Ok.
              - speaker: human
                text: What is Squirrel?
              - speaker: assistant
            model: anthropic/claude-2
            temperature: 0
            topK: -1
            topP: -1
        queryString: []
        url: https://demo.sourcegraph.com/.api/completions/stream
      response:
        bodySize: 100352
        content:
          mimeType: text/event-stream
          size: 100352
          text: >+
            event: completion

            data: {"completion":" Based","stopReason":""}


            event: completion

            data: {"completion":" Based on","stopReason":""}


            event: completion

            data: {"completion":" Based on the","stopReason":""}


            event: completion

            data: {"completion":" Based on the code","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text,","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squ","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squir","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n-","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-s","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter,","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet.","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Source","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n-","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Star","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starl","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark,","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python,","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java.","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover,","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, bread","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs,","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n-","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The Type","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Source","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n-","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it,","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Source","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary,","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squ","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squir","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Source","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence,","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like ho","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers,","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding definitions","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding definitions/","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding definitions/references","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding definitions/references etc","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding definitions/references etc.","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding definitions/references etc. It","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding definitions/references etc. It uses","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding definitions/references etc. It uses tree","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding definitions/references etc. It uses tree-","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding definitions/references etc. It uses tree-s","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding definitions/references etc. It uses tree-sitter","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding definitions/references etc. It uses tree-sitter for","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding definitions/references etc. It uses tree-sitter for parsing","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding definitions/references etc. It uses tree-sitter for parsing code","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding definitions/references etc. It uses tree-sitter for parsing code and","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding definitions/references etc. It uses tree-sitter for parsing code and provides","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding definitions/references etc. It uses tree-sitter for parsing code and provides an","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding definitions/references etc. It uses tree-sitter for parsing code and provides an HTTP","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding definitions/references etc. It uses tree-sitter for parsing code and provides an HTTP API","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding definitions/references etc. It uses tree-sitter for parsing code and provides an HTTP API that","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding definitions/references etc. It uses tree-sitter for parsing code and provides an HTTP API that Source","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding definitions/references etc. It uses tree-sitter for parsing code and provides an HTTP API that Sourcegraph","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding definitions/references etc. It uses tree-sitter for parsing code and provides an HTTP API that Sourcegraph front","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding definitions/references etc. It uses tree-sitter for parsing code and provides an HTTP API that Sourcegraph frontends","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding definitions/references etc. It uses tree-sitter for parsing code and provides an HTTP API that Sourcegraph frontends consume","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding definitions/references etc. It uses tree-sitter for parsing code and provides an HTTP API that Sourcegraph frontends consume.","stopReason":""}


            event: completion

            data: {"completion":" Based on the code snippets and text, Squirrel seems to be:\n\n- An HTTP server for providing local code intelligence using tree-sitter, as described in the README.md snippet. It is used by Sourcegraph for precise code navigation.\n\n- There are various Go files that implement handlers and parsers for different languages like Starlark, Python, Java. These handle things like hover, breadcrumbs, references etc.\n\n- The TypeScript code shows it being used to provide code intelligence like definitions and references to the Sourcegraph frontend.\n\n- There are also test cases and documentation around it, showing it is a key component in Sourcegraph's code intelligence functionality.\n\nSo in summary, Squirrel is Sourcegraph's internal service for fast and precise code intelligence, that powers features like hovers, finding definitions/references etc. It uses tree-sitter for parsing code and provides an HTTP API that Sourcegraph frontends consume.","stopReason":"stop_sequence"}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Wed, 06 Mar 2024 07:55:46 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With,
              Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1214
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-03-06T07:55:42.071Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 402b7b5009f7d08b7aa1506bda51149c
      _order: 0
      cache: {}
      request:
        bodySize: 217
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_b20717265e7ab1d132874d8ff0be053ab9c1dacccec8dce0bbba76888b6a0a69
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: enterpriseClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "217"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: demo.sourcegraph.com
        headersSize: 353
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query CodyConfigFeaturesResponse {
                  site {
                      codyConfigFeatures {
                          chat
                          autoComplete
                          commands
                          attribution
                      }
                  }
              }
            variables: {}
        queryString:
          - name: CodyConfigFeaturesResponse
            value: null
        url: https://demo.sourcegraph.com/.api/graphql?CodyConfigFeaturesResponse
      response:
        bodySize: 155
        content:
          encoding: base64
          mimeType: application/json
          size: 155
          text: "[\"H4sIAAAAAAAAAzyLwQqAIBAF/2XPfYFXof/YdC0h3dDnIcR/Dws6DQwznTyDyXSqETLp1\
            N9Wc4j7KoxWpL72YJBBabIQN6jVdJ0yj885TYmzr38DlLg1\",\"RM1kAp9VxhjjAQA\
            A//8DAIfOLkJuAAAA\"]"
        cookies: []
        headers:
          - name: date
            value: Wed, 06 Mar 2024 07:55:34 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With,
              Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1243
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-03-06T07:55:34.523Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: a7f73f577ec825962be7b3003873378c
      _order: 0
      cache: {}
      request:
        bodySize: 318
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_b20717265e7ab1d132874d8ff0be053ab9c1dacccec8dce0bbba76888b6a0a69
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: enterpriseClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "318"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: demo.sourcegraph.com
        headersSize: 358
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query CurrentSiteCodyLlmConfiguration {
                  site {
                      codyLLMConfiguration {
                          chatModel
                          chatModelMaxTokens
                          fastChatModel
                          fastChatModelMaxTokens
                          completionModel
                          completionModelMaxTokens
                      }
                  }
              }
            variables: {}
        queryString:
          - name: CurrentSiteCodyLlmConfiguration
            value: null
        url: https://demo.sourcegraph.com/.api/graphql?CurrentSiteCodyLlmConfiguration
      response:
        bodySize: 215
        content:
          encoding: base64
          mimeType: application/json
          size: 215
          text: "[\"H4sIAAAAAAAAA4TOMQ7CMAxA0bt4bkXajaxdm40LWElKI4JdNS4CVbk7ShdQBpgsWd9P3\
            sGhIOgdUhBfpmX3GkczME3huq0ogenYzyiGnY+gAUnmlZdg\",\"Tzbi5nzbQ/MJDD4\
            vfPOUQHe9UqqBCZMMv+4DJUGStoMq/rLOB2X5vkRfnvqLPYpW9ZWXc85vAAAA//8DAC\
            mc8DoDAQAA\"]"
        cookies: []
        headers:
          - name: date
            value: Wed, 06 Mar 2024 07:55:33 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With,
              Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1243
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-03-06T07:55:33.615Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: b65ff73c0b9a34b07da801d1c70d8c56
      _order: 0
      cache: {}
      request:
        bodySize: 155
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_b20717265e7ab1d132874d8ff0be053ab9c1dacccec8dce0bbba76888b6a0a69
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: enterpriseClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "155"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: demo.sourcegraph.com
        headersSize: 358
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query CurrentSiteCodyLlmConfiguration {
                  site {
                      codyLLMConfiguration {
                          provider
                      }
                  }
              }
            variables: {}
        queryString:
          - name: CurrentSiteCodyLlmConfiguration
            value: null
        url: https://demo.sourcegraph.com/.api/graphql?CurrentSiteCodyLlmConfiguration
      response:
        bodySize: 131
        content:
          encoding: base64
          mimeType: application/json
          size: 131
          text: "[\"H4sIAAAAAAAAA6pWSkksSVSyqlYqzixJBdHJ+SmVPj6+zvl5aZnppUWJJZn5eSDxgqL8s\
            syU1CIlK6Xi/NKi5NT0osSCDKXa2tpaAAAAAP//AwAfFAXA\",\"RQAAAA==\"]"
        cookies: []
        headers:
          - name: date
            value: Wed, 06 Mar 2024 07:55:33 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With,
              Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1243
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-03-06T07:55:33.617Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 3ec34ed6dc417828a259a9dd9236c0f8
      _order: 0
      cache: {}
      request:
        bodySize: 227
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_b20717265e7ab1d132874d8ff0be053ab9c1dacccec8dce0bbba76888b6a0a69
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: enterpriseClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "227"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: demo.sourcegraph.com
        headersSize: 338
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query CurrentUser {
                  currentUser {
                      id
                      hasVerifiedEmail
                      displayName
                      username
                      avatarURL
                      primaryEmail {
                          email
                      }
                  }
              }
            variables: {}
        queryString:
          - name: CurrentUser
            value: null
        url: https://demo.sourcegraph.com/.api/graphql?CurrentUser
      response:
        bodySize: 203
        content:
          encoding: base64
          mimeType: application/json
          size: 203
          text: "[\"H4sIAAAAAAAAAzSMwQrCMBAF/+Wd8wUBj940B7HF69JsdSVJyyYRYsm/S0WPMwyzwVMh2\
            A1TVeVUhsy6o3hYjDcXpufydtfzAQYPyiOrzML+GEkC7Ewh\",\"s4GXvAZqjiLDphq\
            CQc2s6cuYFt8K5yLpDgN6USEdLqd/uapE0vY77q73/gEAAP//AwA/tyvwmAAAAA==\"\
            ]"
        cookies: []
        headers:
          - name: date
            value: Wed, 06 Mar 2024 07:55:34 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With,
              Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1243
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-03-06T07:55:34.269Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 7ec95f8298c0e6d9135597a17ea02e14
      _order: 0
      cache: {}
      request:
        bodySize: 147
        cookies: []
        headers:
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: enterpriseClient / v1
          - _fromType: array
            name: x-sourcegraph-actor-anonymous-uid
            value: enterpriseClientabcde1234
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "147"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: demo.sourcegraph.com
        headersSize: 328
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |2
              
                  query FeatureFlags {
                      evaluatedFeatureFlags() {
                          name
                          value
                        }
                  }
            variables: {}
        queryString:
          - name: FeatureFlags
            value: null
        url: https://demo.sourcegraph.com/.api/graphql?FeatureFlags
      response:
        bodySize: 38
        content:
          mimeType: text/plain; charset=utf-8
          size: 38
          text: |
            Private mode requires authentication.
        cookies: []
        headers:
          - name: date
            value: Wed, 06 Mar 2024 07:55:33 GMT
          - name: content-type
            value: text/plain; charset=utf-8
          - name: content-length
            value: "38"
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1212
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 401
        statusText: Unauthorized
      startedDateTime: 2024-03-06T07:55:33.420Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 578c7548bc2790e341deea1e2cbc4e07
      _order: 0
      cache: {}
      request:
        bodySize: 147
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_b20717265e7ab1d132874d8ff0be053ab9c1dacccec8dce0bbba76888b6a0a69
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: enterpriseClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "147"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: demo.sourcegraph.com
        headersSize: 339
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |2
              
                  query FeatureFlags {
                      evaluatedFeatureFlags() {
                          name
                          value
                        }
                  }
            variables: {}
        queryString:
          - name: FeatureFlags
            value: null
        url: https://demo.sourcegraph.com/.api/graphql?FeatureFlags
      response:
        bodySize: 135
        content:
          encoding: base64
          mimeType: application/json
          size: 135
          text: "[\"H4sIAAAAAAAAAxTLwQmAMBAEwF72rQ1cAWlCfCxk8ZOonBdRQnoX5z8dmUFYh26WxlBOY\
            jRXKtwu2NKxswqGUFFV+DvrOQ8PTPiLYOFNYx3jAwAA//8D\",\"AHxh3HJNAAAA\"]"
        cookies: []
        headers:
          - name: date
            value: Wed, 06 Mar 2024 07:55:34 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With,
              Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1243
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-03-06T07:55:34.527Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 1014aeb1373c8aeb2eac8ff14a9fb8c7
      _order: 0
      cache: {}
      request:
        bodySize: 762
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_b20717265e7ab1d132874d8ff0be053ab9c1dacccec8dce0bbba76888b6a0a69
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: enterpriseClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "762"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: demo.sourcegraph.com
        headersSize: 341
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: >-
              
              query GetCodyContext($repos: [ID!]!, $query: String!, $codeResultsCount: Int!, $textResultsCount: Int!) {
              	getCodyContext(repos: $repos, query: $query, codeResultsCount: $codeResultsCount, textResultsCount: $textResultsCount) {
                      ...on FileChunkContext {
                          blob {
                              path
                              repository {
                                id
                                name
                              }
                              commit {
                                oid
                              }
                              url
                            }
                            startLine
                            endLine
                            chunkContent
                      }
                  }
              }
            variables:
              codeResultsCount: 15
              query: What is Squirrel?
              repos:
                - UmVwb3NpdG9yeTozNzI2MQ==
                - UmVwb3NpdG9yeTozMTA=
              textResultsCount: 5
        queryString:
          - name: GetCodyContext
            value: null
        url: https://demo.sourcegraph.com/.api/graphql?GetCodyContext
      response:
        bodySize: 4053
        content:
          encoding: base64
          mimeType: application/json
          size: 4053
          text: "[\"H4sIAAAAAAAA/+xa624bO5J+ldrOj2MbklpXXwQYe3IST9bYxMn4MotBOpDZZHWLKzbZI\
            dmyFdvAPMjuy82TDEi2Lr4l8pnJCTCOfthS81LkV18Vq6o=\",\"eRUxYkk0vIpytK8\
            Um71S0uKljYYfr6JUqNQ1lcSOo2FECxabWZEqYWIuLWpJRExKHo+JZAL1iOaqlauoEW\
            ksleFW6Zkbzlk0jM6Kv1ykvaOSvdmb4an68u705X7UiCQpMBpGObfjKm1RVcRGVZpir\
            kk5Xv0e3TQiqoqCWzel8nMO2r3tzoCS/vZ2xgZpZzfNcJDtbVNMaS/r7e51d9N+dzdz\
            YystomEUf1vQr+vOGjdjB1C8Liw3jchYou1bLjEadnqNCCULP7qdRkTHlZx49KWNhlF\
            iS62sgmQNbJZi5+uYdpIokYmdN9hZieaJc/kxYZq1Bgqexqi10n7QZiITmVWSAlVyit\
            qefK641igOXJdT9UaX1H/dQK3Bj9uELWOJrUzrxP+DK7+FLLSa1qFxfRtg6plaZ1IjV\
            bnkX5D9iQs8uLQoDVfyIEznxydWo620hHruI7zYoIqhaR3KKRGcvdR5VaC0DSenFda0\
            6ZZvbxIZ3TS+agfztcQG9ZRTHFk09pkbwaOY3LaA9ooB7N7jf0nohOS4ULajEy9KpS1\
            sBErS4KnmDFULrjo1xRkX6L7MHxrB6ZLORmk/8CH1khyljY2m8civ3IxGMV6SohTYtM\
            Y3LBhozXqKPvpy2H335/1vK5sqNntIy5Ts9bt97LD2Xn+w28H+Tppm3fbuXkoGbey0e\
            wM66LR79NtadhJ+XXe6uXqfiMlTFB1vbSUStmDuH4AbIBK8G8oIRbBjYqFQdGLAqALt\
            mMscqHKyLYoZVFKjIBYZWLWgi2n5SQ+tm26l3Y4RuBvqLJ5YriSoDEqNlBsE5xdAkin\
            PQxOXcLKEzk8ZJxIvPQ2XK1ws/ep3eIyfzuIeHN/VT2TFAy5DV9LyAhfuwWp3aj3mIR\
            5c/1hNUf90/48i8l2VaqzmMl+o08nkMvc/1w1f7sc9a6v+t7PDt69bKfmC4qfi7+DxF\
            LULRdhGEsUxw+kwVyOGmWmlX0QSNVzsqjyXkmgzkXXPX7kaeTEjXQk0o1zFca6GDLNb\
            wwRPNdEzPzKRywcbiQQAcGqAfUiiBd2iRmgxmhrYh4/hl/skUaqRMKqrIjWtXC26hkZ\
            P+fnjB/kjuD9Jx0Qj8+emO3Mc90QsMCd01sR5FGtig0TTcVxqNeUMtVk73vg3Itg/Dd\
            idvGt7Ne/q3+Ng7WauwOfDMuM53ECmVQG/tGLqH/yycEZX4JwFHKOphG2A9v9P1VtFf\
            fzQgLCe4/p5+G9uTzhF7da+OmnGJXutaHBqK73Z/JlZ7X2hSXko2TyeOZSvFMPfhA+Y\
            lmMLoidMXdySwzDjkrtBf65Qz9wGMtQoKRr/YGX45wo1x1tyi8ki7ln2m5vQ3e2ceCB\
            O1QTlSm/rfrtJExlvbcHpGEFWRYraBWUugjdwMVY+MPP6AUokpAiU0DEyIBaUpNjyUd\
            lXrO0CU88cdC6+1NzgCokqg2FxvxGDzGF36J4/X1P7vWjdsbPBqqF1tu9bGqx8blzC7\
            b+EfyFlT+SNowYxM0khqyT1QblZyj9e8PUvnMzZWHt1VbreZghnDy/5fWhP5OYQPmhV\
            cINJ1W736Nx6P36Ca6ikNxJkvg3hKkxOlTSO2o4fDfAc8fbueNeAoN6GZ3C9X7iB/fm\
            SnhBZCCLzkUNVED35GVc+Asp3DS0friasxJsysYZbi/pOfa0gdII6zlXTasRm6PNYXH\
            mvgheM8Rmq/CtI3PEw/VVNd/r3de1UE0b72h4M9yHXJX0VJnR2LhbuYIPaywY4K+9u+\
            8rrS52bzWUBEv5jHyQX85oiz+b1RDfDBmq9Cfv7EAqLZ3JRYkA2H5HYOIbTMTfAc6k0\
            mg==\",\"uqwZDsPbiwGroCCWjn29IsUxmXKlIVOVZDBGjcOVOcfWlmYYr4LuFbKGbk\
            hnu9dhg93tdn+3M9jr7LT3tgmlvd5gu9/foYNBSjDNut2vp3nWlqO61u1C4v98O9hpD\
            naWK7y3fwMXyDVrAJEMCjJLEaQKBRXpPCQRDUgrC77UY8BF3BPgGVxgfTAAkQG91nzu\
            +rnkouH+PNXFljM7VvIZWts6kPxR5Zhve9q1lXo7Sfup1PuQ/PE1tt+nycpy8VOFt7H\
            4oQZ5v1Q61+rTXO7/kin5qdgHAPmx7rZ+MbaGakOBLwQzz02Lt/Z+W2Hd/orGet17Kl\
            vJsqViOCoUqwSaRC4bmmaKwuKE20e6cMEo0exOK8NprFEgMXinJZEP0s6isSOvt3ieT\
            rm+L+ANStT+lVk6A+FCU7BKCfMkz3188PL1u4NWwZ4bOb6BxlPs+8Xi3aKD/s4r0v86\
            Pf0ABvUUXWqgISPG+pB6/jozaM6/1PTVG8FzlBShMlzmsJKVth5WK1M0JqzgMmZYCjW\
            LJ1WKWqJFE1utqlSgGStln6GOnwLN3cJY71Zh7P7Vn5O/vvvt/duT0dnx232XXA1rMg\
            17nd1+Is/Pz33VIRSk/ufl8dHh0ZshbG355CrUmMJbbwcdSoYMlBQzz5F6KrjgdgwEH\
            BGEy6pKwSnZ2mrBgSSp8PRYme2CCwESc2L5FMUMeFESan1yWqLOlC6I45XK/KO5jPqN\
            LlyMUQK3MCYGikpYXi5FmgYQ4xqDCAVCyRw1pAgkFegSYcbdQZRW1g36XKGxxrmlJd3\
            iQJGW910vXixt5k6K7zPlOm2HQbu7QJHyIgcqiDH7SWSoRpRmrCxcNDvtdhKB0XQ/ie\
            Z5dmVQN3lBcjStwCz3pK5Qe5Jt7w563U5nJ+52ur2dfntvt8lol2W4vdfss+52s58Ns\
            El2dtNmb4cMerSzh1m32yplnkRxUGwiT8cI3JgKgaGhmqfIHrjM4HYH9faU9wRIbKWx\
            4WDX6KAtyAxytGBsRSfAJRAQijCnZAcGgtKLvNrhElLrQBEnokBjXJBxviau561Fnk9\
            JZcIp4olBige2JOHjyZwxnGFKtHdifjcGiA7FgQulJ1zmnzZe1PRq1p2bRLJm6NwkGp\
            tS2WbdOYk2W3CC9RUSg6F+7M1Aicr9+Irjo0JVLOaS4eUz9W93ELjtxnq3LjD2HrrB6\
            BmcolAXXosO9/rOEJSVLpVB4x3T0BniofQUocTUfsSXfgSf1BQPJfwGOPJLOnPkYlwj\
            tWIGVOm5VXjSOnsELsvKQgxmTMqFa/oc3nPhZQuUBFVpKKtUcAof71TPPm08VlYLrx8\
            2gUtjndfzq2/WbyWcTbl9/v1v/zc/+f/+t/93HHfSPz6inceFfVuzm94RgiUTNNBrF8\
            YbTzBnA53tXv1W0qyzSCIEvD85Cb411OD8yVH7XTew0263Q20STS110G8XD0zvJpt3V\
            Nm3pC2X3NopuBDOUuuVu769drtdS7nDFGXHS69nlgRR2erdrSVZGJYomWPeomsMVely\
            WojBRb1NwQtu/aJpZawqUENBJMmRgZkZi4UJFMqUHn7tDuETI+B/j0uCjwW6/dW8aHA\
            /L7qG5g/4wI8Ru/YHrhN5DeelLAtw6Rosb2IGx+yvV1lzDv/yzzUcVzLI86K9Hbqwjc\
            ygcC75B38CMoG1c1io5qU1cbih2XQsbjrX2nSxsHYRTzNcOWiZ8T+B2DUchCughFI0B\
            sKcLiJD6aPWhbgfA9QKZ6qSOY/m4Wl6LX4HpqxIhjMvMOSmCxjM4kDwS2h5ZvkEI8VM\
            aQRVonRwEfhw/F3X55F59f71Xw==\",\"R/99cPBhdHZ0dnLwenR88Or98evDozcn+1\
            ZXCL5DeDg6/NPo3eHJyeHRm9DmYdVu/U8yx+vlnut8CDXxJ6pyYXd9fvnDe6aqcOxeE\
            Gd6ykvzV6IZn3JWkQAjTDmBc25bru95C46xQH93ph7xOAFq0A1KtgD9X4CMLC9hyr8G\
            CzQt/DKPAvwmfjmvkfEbXiSkfhIXy6nK5S8Tf+V7TGSOZp740D/Ksq5DXgmvMa3yPKT\
            GtcMJ9bBPNzf/CAAA//8po2qERzUAAA==\"]"
        cookies: []
        headers:
          - name: date
            value: Wed, 06 Mar 2024 07:55:42 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: content-encoding
            value: gzip
          - name: vary
            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With,
              Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1243
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-03-06T07:55:41.179Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 01ece4890d68be996873bb0761d426df
      _order: 0
      cache: {}
      request:
        bodySize: 699
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_b20717265e7ab1d132874d8ff0be053ab9c1dacccec8dce0bbba76888b6a0a69
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: enterpriseClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "699"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: demo.sourcegraph.com
        headersSize: 343
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: >-
              
              mutation LogEventMutation($event: String!, $userCookieID: String!, $url: String!, $source: EventSource!, $argument: String, $publicArgument: String, $client: String, $connectedSiteID: String, $hashedLicenseKey: String) {
                  logEvent(
              		event: $event
              		userCookieID: $userCookieID
              		url: $url
              		source: $source
              		argument: $argument
              		publicArgument: $publicArgument
              		client: $client
              		connectedSiteID: $connectedSiteID
              		hashedLicenseKey: $hashedLicenseKey
                  ) {
              		alwaysNil
              	}
              }
            variables:
              client: VSCODE_CODY_EXTENSION
              event: CodyVSCodeExtension:Auth:connected
              source: IDEEXTENSION
              url: ""
              userCookieID: ANONYMOUS_USER_COOKIE_ID
        queryString:
          - name: LogEventMutation
            value: null
        url: https://demo.sourcegraph.com/.api/graphql?LogEventMutation
      response:
        bodySize: 26
        content:
          mimeType: application/json
          size: 26
          text: "{\"data\":{\"logEvent\":null}}"
        cookies: []
        headers:
          - name: date
            value: Wed, 06 Mar 2024 07:55:34 GMT
          - name: content-type
            value: application/json
          - name: content-length
            value: "26"
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With,
              Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1211
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-03-06T07:55:34.525Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 9b22ba8e12e8669a186175c2c87e1ee7
      _order: 0
      cache: {}
      request:
        bodySize: 342
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_b20717265e7ab1d132874d8ff0be053ab9c1dacccec8dce0bbba76888b6a0a69
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: enterpriseClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "342"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: demo.sourcegraph.com
        headersSize: 348
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |
              
              mutation RecordTelemetryEvents($events: [TelemetryEventInput!]!) {
              	telemetry {
              		recordEvents(events: $events) {
              			alwaysNil
              		}
              	}
              }
            variables:
              events:
                - action: connected
                  feature: cody.auth
                  parameters:
                    privateMetadata: {}
                    version: 0
                  source:
                    client: VSCode.Cody
                    clientVersion: 1.6.1
        queryString:
          - name: RecordTelemetryEvents
            value: null
        url: https://demo.sourcegraph.com/.api/graphql?RecordTelemetryEvents
      response:
        bodySize: 112
        content:
          encoding: base64
          mimeType: application/json
          size: 112
          text: "[\"H4sIAAAAAAAAA6pWSkksSVSyqlYqSc1JzU0tKaoEcYpSk/OLUlzLUvNKikH8xJzyxMpiv\
            8wcJau80pyc2traWgAAAAD//wMAhHZ9ajoAAAA=\"]"
          textDecoded:
            data:
              telemetry:
                recordEvents:
                  alwaysNil: null
        cookies: []
        headers:
          - name: date
            value: Wed, 06 Mar 2024 07:55:34 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With,
              Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1243
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-03-06T07:55:34.717Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 630513806fa5798036730b6cf0409912
      _order: 0
      cache: {}
      request:
        bodySize: 351
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_b20717265e7ab1d132874d8ff0be053ab9c1dacccec8dce0bbba76888b6a0a69
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: enterpriseClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "351"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: demo.sourcegraph.com
        headersSize: 348
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |
              
              mutation RecordTelemetryEvents($events: [TelemetryEventInput!]!) {
              	telemetry {
              		recordEvents(events: $events) {
              			alwaysNil
              		}
              	}
              }
            variables:
              events:
                - action: submitted
                  feature: cody.chat-question
                  parameters:
                    privateMetadata: {}
                    version: 0
                  source:
                    client: VSCode.Cody
                    clientVersion: 1.6.1
        queryString:
          - name: RecordTelemetryEvents
            value: null
        url: https://demo.sourcegraph.com/.api/graphql?RecordTelemetryEvents
      response:
        bodySize: 112
        content:
          encoding: base64
          mimeType: application/json
          size: 112
          text: "[\"H4sIAAAAAAAAA6pWSkksSVSyqlYqSc1JzU0tKaoEcYpSk/OLUlzLUvNKikH8xJzyxMpiv\
            8wcJau80pyc2traWgAAAAD//wMAhHZ9ajoAAAA=\"]"
          textDecoded:
            data:
              telemetry:
                recordEvents:
                  alwaysNil: null
        cookies: []
        headers:
          - name: date
            value: Wed, 06 Mar 2024 07:55:34 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With,
              Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1243
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-03-06T07:55:34.729Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 68d204548efccef97a090a68fe204efa
      _order: 0
      cache: {}
      request:
        bodySize: 350
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_b20717265e7ab1d132874d8ff0be053ab9c1dacccec8dce0bbba76888b6a0a69
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: enterpriseClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "350"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: demo.sourcegraph.com
        headersSize: 348
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |
              
              mutation RecordTelemetryEvents($events: [TelemetryEventInput!]!) {
              	telemetry {
              		recordEvents(events: $events) {
              			alwaysNil
              		}
              	}
              }
            variables:
              events:
                - action: executed
                  feature: cody.chat-question
                  parameters:
                    privateMetadata: {}
                    version: 0
                  source:
                    client: VSCode.Cody
                    clientVersion: 1.6.1
        queryString:
          - name: RecordTelemetryEvents
            value: null
        url: https://demo.sourcegraph.com/.api/graphql?RecordTelemetryEvents
      response:
        bodySize: 112
        content:
          encoding: base64
          mimeType: application/json
          size: 112
          text: "[\"H4sIAAAAAAAAA6pWSkksSVSyqlYqSc1JzU0tKaoEcYpSk/OLUlzLUvNKikH8xJzyxMpiv\
            8wcJau80pyc2traWgAAAAD//wMAhHZ9ajoAAAA=\"]"
          textDecoded:
            data:
              telemetry:
                recordEvents:
                  alwaysNil: null
        cookies: []
        headers:
          - name: date
            value: Wed, 06 Mar 2024 07:55:34 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With,
              Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1243
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-03-06T07:55:34.731Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 870f864949ce44cab4779c1ddb3d6801
      _order: 0
      cache: {}
      request:
        bodySize: 348
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_b20717265e7ab1d132874d8ff0be053ab9c1dacccec8dce0bbba76888b6a0a69
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: enterpriseClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "348"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: demo.sourcegraph.com
        headersSize: 348
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |
              
              mutation RecordTelemetryEvents($events: [TelemetryEventInput!]!) {
              	telemetry {
              		recordEvents(events: $events) {
              			alwaysNil
              		}
              	}
              }
            variables:
              events:
                - action: executed
                  feature: cody.command.doc
                  parameters:
                    privateMetadata: {}
                    version: 0
                  source:
                    client: VSCode.Cody
                    clientVersion: 1.6.1
        queryString:
          - name: RecordTelemetryEvents
            value: null
        url: https://demo.sourcegraph.com/.api/graphql?RecordTelemetryEvents
      response:
        bodySize: 112
        content:
          encoding: base64
          mimeType: application/json
          size: 112
          text: "[\"H4sIAAAAAAAAA6pWSkksSVSyqlYqSc1JzU0tKaoEcYpSk/OLUlzLUvNKikH8xJzyxMpiv\
            8wcJau80pyc2traWgAAAAD//wMAhHZ9ajoAAAA=\"]"
          textDecoded:
            data:
              telemetry:
                recordEvents:
                  alwaysNil: null
        cookies: []
        headers:
          - name: date
            value: Wed, 06 Mar 2024 07:55:36 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With,
              Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1243
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-03-06T07:55:36.096Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 2a2e15efb733d013f00cd19f9da37adc
      _order: 0
      cache: {}
      request:
        bodySize: 350
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_b20717265e7ab1d132874d8ff0be053ab9c1dacccec8dce0bbba76888b6a0a69
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: enterpriseClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "350"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: demo.sourcegraph.com
        headersSize: 348
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |
              
              mutation RecordTelemetryEvents($events: [TelemetryEventInput!]!) {
              	telemetry {
              		recordEvents(events: $events) {
              			alwaysNil
              		}
              	}
              }
            variables:
              events:
                - action: hasCode
                  feature: cody.fixup.response
                  parameters:
                    privateMetadata: {}
                    version: 0
                  source:
                    client: VSCode.Cody
                    clientVersion: 1.6.1
        queryString:
          - name: RecordTelemetryEvents
            value: null
        url: https://demo.sourcegraph.com/.api/graphql?RecordTelemetryEvents
      response:
        bodySize: 112
        content:
          encoding: base64
          mimeType: application/json
          size: 112
          text: "[\"H4sIAAAAAAAAA6pWSkksSVSyqlYqSc1JzU0tKaoEcYpSk/OLUlzLUvNKikH8xJzyxMpiv\
            8wcJau80pyc2traWgAAAAD//wMAhHZ9ajoAAAA=\"]"
          textDecoded:
            data:
              telemetry:
                recordEvents:
                  alwaysNil: null
        cookies: []
        headers:
          - name: date
            value: Wed, 06 Mar 2024 07:55:41 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With,
              Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1243
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-03-06T07:55:40.924Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: a3c69ce6a548f0cd486079592a297e4a
      _order: 0
      cache: {}
      request:
        bodySize: 349
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_b20717265e7ab1d132874d8ff0be053ab9c1dacccec8dce0bbba76888b6a0a69
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: enterpriseClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "349"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: demo.sourcegraph.com
        headersSize: 348
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |
              
              mutation RecordTelemetryEvents($events: [TelemetryEventInput!]!) {
              	telemetry {
              		recordEvents(events: $events) {
              			alwaysNil
              		}
              	}
              }
            variables:
              events:
                - action: succeeded
                  feature: cody.fixup.apply
                  parameters:
                    privateMetadata: {}
                    version: 0
                  source:
                    client: VSCode.Cody
                    clientVersion: 1.6.1
        queryString:
          - name: RecordTelemetryEvents
            value: null
        url: https://demo.sourcegraph.com/.api/graphql?RecordTelemetryEvents
      response:
        bodySize: 112
        content:
          encoding: base64
          mimeType: application/json
          size: 112
          text: "[\"H4sIAAAAAAAAA6pWSkksSVSyqlYqSc1JzU0tKaoEcYpSk/OLUlzLUvNKikH8xJzyxMpiv\
            8wcJau80pyc2traWgAAAAD//wMAhHZ9ajoAAAA=\"]"
          textDecoded:
            data:
              telemetry:
                recordEvents:
                  alwaysNil: null
        cookies: []
        headers:
          - name: date
            value: Wed, 06 Mar 2024 07:55:41 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With,
              Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1243
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-03-06T07:55:40.929Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 20c2d8d0f85fd867475b5c7ba2809de9
      _order: 0
      cache: {}
      request:
        bodySize: 349
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_b20717265e7ab1d132874d8ff0be053ab9c1dacccec8dce0bbba76888b6a0a69
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: enterpriseClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "349"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: demo.sourcegraph.com
        headersSize: 348
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |
              
              mutation RecordTelemetryEvents($events: [TelemetryEventInput!]!) {
              	telemetry {
              		recordEvents(events: $events) {
              			alwaysNil
              		}
              	}
              }
            variables:
              events:
                - action: accept
                  feature: cody.fixup.codeLens
                  parameters:
                    privateMetadata: {}
                    version: 0
                  source:
                    client: VSCode.Cody
                    clientVersion: 1.6.1
        queryString:
          - name: RecordTelemetryEvents
            value: null
        url: https://demo.sourcegraph.com/.api/graphql?RecordTelemetryEvents
      response:
        bodySize: 112
        content:
          encoding: base64
          mimeType: application/json
          size: 112
          text: "[\"H4sIAAAAAAAAA6pWSkksSVSyqlYqSc1JzU0tKaoEcYpSk/OLUlzLUvNKikH8xJzyxMpiv\
            8wcJau80pyc2traWgAAAAD//wMAhHZ9ajoAAAA=\"]"
          textDecoded:
            data:
              telemetry:
                recordEvents:
                  alwaysNil: null
        cookies: []
        headers:
          - name: date
            value: Wed, 06 Mar 2024 07:55:41 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With,
              Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1243
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-03-06T07:55:40.931Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: eafc5318df66369046c74884081085e5
      _order: 0
      cache: {}
      request:
        bodySize: 253
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_b20717265e7ab1d132874d8ff0be053ab9c1dacccec8dce0bbba76888b6a0a69
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: enterpriseClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "253"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: demo.sourcegraph.com
        headersSize: 339
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |
              
              query Repositories($names: [String!]!, $first: Int!) {
                  repositories(names: $names, first: $first) {
                    nodes {
                      name
                      id
                    }
                  }
                }
            variables:
              first: 1
              names:
                - github.com/sourcegraph/sourcegraph
        queryString:
          - name: Repositories
            value: null
        url: https://demo.sourcegraph.com/.api/graphql?Repositories
      response:
        bodySize: 171
        content:
          encoding: base64
          mimeType: application/json
          size: 171
          text: "[\"H4sIAAAAAAAAA6pWSkksSVSyqlYqSi3IL84syS/KTC0G8fPyU0CM6GqlvMTcVCUrpfTMk\
            ozSJL3k/Fz94vzSouTU9KLEggxktpKOUmaKkpVSaG5YeZKx\",\"X0GKu2Vlakh+lW+\
            Io61SbWxtbS0AAAD//wMAsuY8XG8AAAA=\"]"
        cookies: []
        headers:
          - name: date
            value: Wed, 06 Mar 2024 07:55:41 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With,
              Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1243
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-03-06T07:55:40.935Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 4cf1d5f2bdf5fa0f3a23f7b5b0d71b18
      _order: 0
      cache: {}
      request:
        bodySize: 144
        cookies: []
        headers:
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: enterpriseClient / v1
          - _fromType: array
            name: x-sourcegraph-actor-anonymous-uid
            value: enterpriseClientabcde1234
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "144"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: demo.sourcegraph.com
        headersSize: 326
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query Repository($name: String!) {
              	repository(name: $name) {
              		id
              	}
              }
            variables:
              name: github.com/sourcegraph/cody
        queryString:
          - name: Repository
            value: null
        url: https://demo.sourcegraph.com/.api/graphql?Repository
      response:
        bodySize: 38
        content:
          mimeType: text/plain; charset=utf-8
          size: 38
          text: |
            Private mode requires authentication.
        cookies: []
        headers:
          - name: date
            value: Wed, 06 Mar 2024 07:55:33 GMT
          - name: content-type
            value: text/plain; charset=utf-8
          - name: content-length
            value: "38"
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1212
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 401
        statusText: Unauthorized
      startedDateTime: 2024-03-06T07:55:33.422Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: bc2dc036a16af0823a588cf749db6626
      _order: 0
      cache: {}
      request:
        bodySize: 144
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_b20717265e7ab1d132874d8ff0be053ab9c1dacccec8dce0bbba76888b6a0a69
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: enterpriseClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "144"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: demo.sourcegraph.com
        headersSize: 337
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query Repository($name: String!) {
              	repository(name: $name) {
              		id
              	}
              }
            variables:
              name: github.com/sourcegraph/cody
        queryString:
          - name: Repository
            value: null
        url: https://demo.sourcegraph.com/.api/graphql?Repository
      response:
        bodySize: 112
        content:
          encoding: base64
          mimeType: application/json
          size: 112
          text: "[\"H4sIAAAAAAAAA6pWSkksSVSyqlYqSi3IL84syS+qBPEyU5SslEJzw8qTjP0KUtwtK1ND8\
            qv8qjyNfANtbZVqa2sBAAAA//8DACmyIHw5AAAA\"]"
          textDecoded:
            data:
              repository:
                id: UmVwb3NpdG9yeTozNzI2MQ==
        cookies: []
        headers:
          - name: date
            value: Wed, 06 Mar 2024 07:55:34 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With,
              Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1243
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-03-06T07:55:34.708Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 570c1a8e665e8bb39edf65bc3da9f573
      _order: 0
      cache: {}
      request:
        bodySize: 141
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_b20717265e7ab1d132874d8ff0be053ab9c1dacccec8dce0bbba76888b6a0a69
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: enterpriseClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "141"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: demo.sourcegraph.com
        headersSize: 344
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query SiteGraphQLFields {
                  __type(name: "Site") {
                      fields {
                          name
                      }
                  }
              }
            variables: {}
        queryString:
          - name: SiteGraphQLFields
            value: null
        url: https://demo.sourcegraph.com/.api/graphql?SiteGraphQLFields
      response:
        bodySize: 591
        content:
          encoding: base64
          mimeType: application/json
          size: 591
          text: "[\"H4sIAAAAAAAAA3yS0Y7aQAxF/yXP/QLeVilUK1GphWX7UFUrM74Eaycz6dgDGyH+vRroV\
            kzE9i3xvXF8j31qmIya2al5ebFxQHnaCTxrM/t5agL1aGY=\",\"jXBz/vTvTcXw+Pm\
            24mLYSZcTmcRwK3gyqK1hJqHTqsnfWkvqiHFP2qyW1U8orOAj8Vqs8h8ER6SWwgP3Ek\
            QN6VYm56D6FF8Rqgko2/5bigdhpErAmyEF8g/OxRys0rZZPD8j6STokCJnZ3eUPDAZ2\
            j3c6205AKwrDFHFYhrbjwi+D7NGOoiDLlLsF+IrAOR9PM5ZbD4x/xDbT827BGwUSedv\
            DmBw3QmpDrwnbSPjMRi8lw7BTXYVWOc9iX9Gkp24S4BLQe/wWeetuiTDNGVW6rA2MlE\
            TV68pkB+nxayTnfUxFI4Sug+6FETlcN5vseCqWw5dIsYKxBKg01OJm6s+D7T1NbQBqQ\
            BtYz94lGT6PUejuxbG/2wJv7Mk6JUl+MJxEct3461Pyk7GO6O4yONy+fXDayr6VVyAL\
            CfoVP1ChiONKzIspRcrOLM251/n8/kPAAAA//8DANaF7gAtBAAA\"]"
        cookies: []
        headers:
          - name: date
            value: Wed, 06 Mar 2024 07:55:34 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With,
              Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1243
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-03-06T07:55:33.858Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: be19d9417d36e9a166b17ce300a46f59
      _order: 0
      cache: {}
      request:
        bodySize: 100
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_b20717265e7ab1d132874d8ff0be053ab9c1dacccec8dce0bbba76888b6a0a69
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: enterpriseClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "100"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: demo.sourcegraph.com
        headersSize: 345
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query SiteHasCodyEnabled {
                  site {
                      isCodyEnabled
                  }
              }
            variables: {}
        queryString:
          - name: SiteHasCodyEnabled
            value: null
        url: https://demo.sourcegraph.com/.api/graphql?SiteHasCodyEnabled
      response:
        bodySize: 40
        content:
          mimeType: application/json
          size: 40
          text: "{\"data\":{\"site\":{\"isCodyEnabled\":true}}}"
        cookies: []
        headers:
          - name: date
            value: Wed, 06 Mar 2024 07:55:34 GMT
          - name: content-type
            value: application/json
          - name: content-length
            value: "40"
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With,
              Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1211
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-03-06T07:55:34.047Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: cc90fd0d6e140d79de5f511ea5e23f70
      _order: 0
      cache: {}
      request:
        bodySize: 164
        cookies: []
        headers:
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: enterpriseClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "164"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: demo.sourcegraph.com
        headersSize: 272
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query SiteIdentification {
              	site {
              		siteID
              		productSubscription {
              			license {
              				hashedKey
              			}
              		}
              	}
              }
            variables: {}
        queryString:
          - name: SiteIdentification
            value: null
        url: https://demo.sourcegraph.com/.api/graphql?SiteIdentification
      response:
        bodySize: 38
        content:
          mimeType: text/plain; charset=utf-8
          size: 38
          text: |
            Private mode requires authentication.
        cookies: []
        headers:
          - name: date
            value: Wed, 06 Mar 2024 07:55:33 GMT
          - name: content-type
            value: text/plain; charset=utf-8
          - name: content-length
            value: "38"
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1212
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 401
        statusText: Unauthorized
      startedDateTime: 2024-03-06T07:55:33.394Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 5d654013a5d5769adf1b01e3463a67b9
      _order: 0
      cache: {}
      request:
        bodySize: 164
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_b20717265e7ab1d132874d8ff0be053ab9c1dacccec8dce0bbba76888b6a0a69
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: enterpriseClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "164"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: demo.sourcegraph.com
        headersSize: 345
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query SiteIdentification {
              	site {
              		siteID
              		productSubscription {
              			license {
              				hashedKey
              			}
              		}
              	}
              }
            variables: {}
        queryString:
          - name: SiteIdentification
            value: null
        url: https://demo.sourcegraph.com/.api/graphql?SiteIdentification
      response:
        bodySize: 235
        content:
          encoding: base64
          mimeType: application/json
          size: 235
          text: "[\"H4sIAAAAAAAAAzTMsQrDIBCA4Xe5uYIaPTVzl9KxT3A5TyKUJFQzlNB3Lyn0X/7tOyBTJ\
            xgPaLXL/7crjBBj8tkTKwzIygmxmhI6FT0bjIGMLRousL3W\",\"vHN/7FPjV916XZe\
            TeVaWpf3Emdos+S5vGAFDIs25IA1Mk3PJR6HBBmJEF4OYmJwwmuBtKFannJK3woMtmL\
            WUCT5nXwAAAP//AwA4XaGTtgAAAA==\"]"
        cookies: []
        headers:
          - name: date
            value: Wed, 06 Mar 2024 07:55:34 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With,
              Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1243
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-03-06T07:55:34.522Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 1951d7c2f154045a0e432063202ea21e
      _order: 0
      cache: {}
      request:
        bodySize: 101
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_b20717265e7ab1d132874d8ff0be053ab9c1dacccec8dce0bbba76888b6a0a69
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: enterpriseClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "101"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: demo.sourcegraph.com
        headersSize: 345
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query SiteProductVersion {
                  site {
                      productVersion
                  }
              }
            variables: {}
        queryString:
          - name: SiteProductVersion
            value: null
        url: https://demo.sourcegraph.com/.api/graphql?SiteProductVersion
      response:
        bodySize: 44
        content:
          mimeType: application/json
          size: 44
          text: "{\"data\":{\"site\":{\"productVersion\":\"5.3.1\"}}}"
        cookies: []
        headers:
          - name: date
            value: Wed, 06 Mar 2024 07:55:33 GMT
          - name: content-type
            value: application/json
          - name: content-length
            value: "44"
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Accept-Encoding, Authorization, Cookie, Authorization, X-Requested-With,
              Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1211
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-03-06T07:55:33.614Z
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
  pages: []
  version: "1.2"
