log:
  _recordingName: defaultClient
  creator:
    comment: persister:cody-fs
    name: Polly.JS
    version: 6.0.6
  entries:
    - _id: 8a049c80771d508a499a55e49d24b525
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - _fromType: array
            name: accept-encoding
            value: gzip;q=0
          - _fromType: array
            name: authorization
            value: token REDACTED
          - _fromType: array
            name: connection
            value: keep-alive
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "1273"
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            maxTokensToSample: 256
            messages:
              - speaker: human
                text: You are a code completion AI designed to take the surrounding code and
                  shared context into account in order to predict and suggest
                  high-quality code to complete the code enclosed in <CODE5711>
                  tags. You only response with code that works and fits
                  seamlessly with surrounding code if any or use best practice
                  and nothing else.
              - speaker: assistant
                text: I am a code completion AI with exceptional context-awareness designed to
                  auto-complete nested code blocks with high-quality code that
                  seamlessly integrates with surrounding code.
              - speaker: human
                text: >-
                  Below is the code from file path src/sum.ts. Review the code
                  outside the XML tags to detect the functionality, formats,
                  style, patterns, and logics in use. Then, use what you detect
                  and reuse methods/libraries to complete and enclose completed
                  code only inside XML tags precisely without duplicating
                  existing implementations. Here is the code: 

                  ```

                  export function sum(a: number, b: number): number {
                     <CODE5711></CODE5711> 
                  }


                  ```
              - speaker: assistant
                text: "<CODE5711>export function sum(a: number, b: number): number {"
            stopSequences:
              - |-
                

                Human:
              - </CODE5711>
            stream: true
            temperature: 0.5
            timeoutMs: 15000
            topK: 0
        queryString: []
        url: https://sourcegraph.com/.api/completions/code
      response:
        content:
          mimeType: text/event-stream
          size: 619
          text: >+
            event: completion

            data: {"completion":"\n ","stopReason":""}


            event: completion

            data: {"completion":"\n  return","stopReason":""}


            event: completion

            data: {"completion":"\n  return a","stopReason":""}


            event: completion

            data: {"completion":"\n  return a +","stopReason":""}


            event: completion

            data: {"completion":"\n  return a + b","stopReason":""}


            event: completion

            data: {"completion":"\n  return a + b;","stopReason":""}


            event: completion

            data: {"completion":"\n  return a + b;\n}","stopReason":""}


            event: completion

            data: {"completion":"\n  return a + b;\n}","stopReason":"stop_sequence"}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 50988e78646b85b75640c96a32734dcf
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - name: content-type
            value: application/json
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token REDACTED
          - name: user-agent
            value: defaultClient / v1
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 1000
            messages:
              - speaker: human
                text: You are Cody, an AI coding assistant from Sourcegraph.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: Hello!
              - speaker: assistant
            model: anthropic/claude-2.0
            temperature: 0.2
            topK: -1
            topP: -1
        queryString: []
        url: https://sourcegraph.com/.api/completions/stream
      response:
        content:
          mimeType: text/event-stream
          size: 641
          text: >+
            event: completion

            data: {"completion":" Hello","stopReason":""}


            event: completion

            data: {"completion":" Hello!","stopReason":""}


            event: completion

            data: {"completion":" Hello! Nice","stopReason":""}


            event: completion

            data: {"completion":" Hello! Nice to","stopReason":""}


            event: completion

            data: {"completion":" Hello! Nice to meet","stopReason":""}


            event: completion

            data: {"completion":" Hello! Nice to meet you","stopReason":""}


            event: completion

            data: {"completion":" Hello! Nice to meet you.","stopReason":""}


            event: completion

            data: {"completion":" Hello! Nice to meet you.","stopReason":"stop_sequence"}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 349de092281b6d15b669a4f39e95ead8
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - name: content-type
            value: application/json
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token REDACTED
          - name: user-agent
            value: defaultClient / v1
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 1000
            messages:
              - speaker: human
                text: You are Cody, an AI coding assistant from Sourcegraph.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: Generate simple hello world function in java!
              - speaker: assistant
            model: anthropic/claude-2.0
            temperature: 0.2
            topK: -1
            topP: -1
        queryString: []
        url: https://sourcegraph.com/.api/completions/stream
      response:
        content:
          mimeType: text/event-stream
          size: 102558
          text: >+
            event: completion

            data: {"completion":" Here","stopReason":""}


            event: completion

            data: {"completion":" Here is","stopReason":""}


            event: completion

            data: {"completion":" Here is a","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n ","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[]","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args)","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n   ","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\");","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n ","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n-","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main.","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java,","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n-","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program.","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n-","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter.","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n-","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method,","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\");","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\"","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console.","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. ","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n-","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The print","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary,","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a Main","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a Main class","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a Main class with","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a Main class with a","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a Main class with a static","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a Main class with a static main","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a Main class with a static main method","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a Main class with a static main method that","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a Main class with a static main method that prints","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a Main class with a static main method that prints \"","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a Main class with a static main method that prints \"Hello","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a Main class with a static main method that prints \"Hello World","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a Main class with a static main method that prints \"Hello World!\"","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a Main class with a static main method that prints \"Hello World!\" when","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a Main class with a static main method that prints \"Hello World!\" when executed","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a Main class with a static main method that prints \"Hello World!\" when executed.","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a Main class with a static main method that prints \"Hello World!\" when executed. This","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a Main class with a static main method that prints \"Hello World!\" when executed. This is","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a Main class with a static main method that prints \"Hello World!\" when executed. This is the","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a Main class with a static main method that prints \"Hello World!\" when executed. This is the simplest","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a Main class with a static main method that prints \"Hello World!\" when executed. This is the simplest Hello","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a Main class with a static main method that prints \"Hello World!\" when executed. This is the simplest Hello World","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a Main class with a static main method that prints \"Hello World!\" when executed. This is the simplest Hello World program","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a Main class with a static main method that prints \"Hello World!\" when executed. This is the simplest Hello World program in","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a Main class with a static main method that prints \"Hello World!\" when executed. This is the simplest Hello World program in Java","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a Main class with a static main method that prints \"Hello World!\" when executed. This is the simplest Hello World program in Java.","stopReason":""}


            event: completion

            data: {"completion":" Here is a simple Hello World program in Java:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); \n  }\n}\n```\n\nTo break this down:\n\n- The code is wrapped in a class called Main. In Java, code must be inside a class.\n\n- The main method is the entry point of the program. It is marked as static so it can be run without creating an instance of Main.\n\n- The main method accepts a String array called args as a parameter. This contains any command line arguments passed to the program.\n\n- Inside the main method, we call System.out.println(\"Hello World\"); to print the text \"Hello World!\" to the console. \n\n- The println method prints the text and a newline character.\n\nSo in summary, this program defines a Main class with a static main method that prints \"Hello World!\" when executed. This is the simplest Hello World program in Java.","stopReason":"stop_sequence"}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 26f7093bcc1d125e7768f46a33e590e8
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token REDACTED
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "318"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query CurrentSiteCodyLlmConfiguration {
                  site {
                      codyLLMConfiguration {
                          chatModel
                          chatModelMaxTokens
                          fastChatModel
                          fastChatModelMaxTokens
                          completionModel
                          completionModelMaxTokens
                      }
                  }
              }
            variables: {}
        queryString:
          - name: CurrentSiteCodyLlmConfiguration
            value: null
        url: https://sourcegraph.com/.api/graphql?CurrentSiteCodyLlmConfiguration
      response:
        content:
          encoding: base64
          mimeType: application/json
          size: 219
          text: '["H4sIAAAAAAAAA4zOsQqDMBDG8Xe5WW10a1ZXs/UFjiTW0PROzAktkncvulgylE4HH39+3AYOBUFvkIL4/Vp272EwPdMY7uuCEpiOfUIx7HwEDUgyLTwHe7ERV+frrlFQnYnB140fnhLotlNKVTBikv6XECgJktQtFPGXdT0oy885+v2tv7AiL7icc/4AAAD//w==","AwCpmMLNBAEAAA=="]'
        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: c382115f0629fc6dabc67adfd72f2923
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token REDACTED
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "155"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query CurrentSiteCodyLlmConfiguration {
                  site {
                      codyLLMConfiguration {
                          provider
                      }
                  }
              }
            variables: {}
        queryString:
          - name: CurrentSiteCodyLlmConfiguration
            value: null
        url: https://sourcegraph.com/.api/graphql?CurrentSiteCodyLlmConfiguration
      response:
        content:
          encoding: base64
          mimeType: application/json
          size: 131
          text: '["H4sIAAAAAAAAA6pWSkksSVSyqlYqzixJBdHJ+SmVPj6+zvl5aZnppUWJJZn5eSDxgqL8ssyU1CIlK6Xi/NKi5NT0osSCDKXa2tpaAAAAAP//","AwAfFAXARQAAAA=="]'
        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: bc9d710017cb613b863131822d75d5c7
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token REDACTED
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "233"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query CurrentUser {
                  currentUser {
                      id
                      hasVerifiedEmail
                      displayName
                      avatarURL
                      codyProEnabled
                      primaryEmail {
                          email
                      }
                  }
              }
            variables: {}
        queryString:
          - name: CurrentUser
            value: null
        url: https://sourcegraph.com/.api/graphql?CurrentUser
      response:
        content:
          encoding: base64
          mimeType: application/json
          size: 304
          text: '["H4sIAAAAAAAAAzSOQWrDMBRErxJmbWKXptAKSrtoyCaYUEholz/Sj60iS+ZLCrjGp+gJepZcrLhpdzNvMfNGGEoENUJnEfZpH1nmag0UDm+10x/hs355v0OBluKBxZ4sm3VH1kElyVzA2Ng7GmrqGAqXL0enLIvd5du5xYatxBg8CtCZEsn+dQuFNqU+qrK8slgtG5vafMyRRQef2KelDl2Zy5tVdV893D6dH1cooIMZdhLWno6Ozf9/L7YjGf6cRvA1IPyK9M1zM4N5ENM0TT8AAAD//wMAYDFO0fQAAAA="]'
          textDecoded:
            data:
              currentUser:
                avatarURL: https://avatars0.githubusercontent.com/u/1408093?v=4
                codyProEnabled: true
                displayName: Ólafur Páll Geirsson
                hasVerifiedEmail: true
                id: VXNlcjozNDY5
                primaryEmail:
                  email: olafurpg@gmail.com
        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 68618dc68610496fb5623c6778ea6c25
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token REDACTED
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "177"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |2
              
                  query EvaluateFeatureFlag($flagName: String!) {
                      evaluateFeatureFlag(flagName: $flagName)
                  }
            variables:
              flagName: cody-autocomplete-tracing
        queryString:
          - name: EvaluateFeatureFlag
            value: null
        url: https://sourcegraph.com/.api/graphql?EvaluateFeatureFlag
      response:
        content:
          mimeType: application/json
          size: 38
          text: '{"data":{"evaluateFeatureFlag":false}}'
        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: application/json
          - name: content-length
            value: "38"
          - name: connection
            value: close
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: f183d7475b363dc45d23134c3118a915
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token REDACTED
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "180"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |2
              
                  query EvaluateFeatureFlag($flagName: String!) {
                      evaluateFeatureFlag(flagName: $flagName)
                  }
            variables:
              flagName: cody-autocomplete-hot-streak
        queryString:
          - name: EvaluateFeatureFlag
            value: null
        url: https://sourcegraph.com/.api/graphql?EvaluateFeatureFlag
      response:
        content:
          mimeType: application/json
          size: 37
          text: '{"data":{"evaluateFeatureFlag":null}}'
        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: application/json
          - name: content-length
            value: "37"
          - name: connection
            value: close
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 6da3ef8e96a914f2db1f9ebf28035fb2
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token REDACTED
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "160"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |2
              
                  query EvaluateFeatureFlag($flagName: String!) {
                      evaluateFeatureFlag(flagName: $flagName)
                  }
            variables:
              flagName: cody-pro
        queryString:
          - name: EvaluateFeatureFlag
            value: null
        url: https://sourcegraph.com/.api/graphql?EvaluateFeatureFlag
      response:
        content:
          mimeType: application/json
          size: 37
          text: '{"data":{"evaluateFeatureFlag":true}}'
        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: application/json
          - name: content-length
            value: "37"
          - name: connection
            value: close
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 7e2cae0c3275084cb257ee48fead6fb9
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token REDACTED
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "187"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |2
              
                  query EvaluateFeatureFlag($flagName: String!) {
                      evaluateFeatureFlag(flagName: $flagName)
                  }
            variables:
              flagName: cody-autocomplete-context-bfg-mixed
        queryString:
          - name: EvaluateFeatureFlag
            value: null
        url: https://sourcegraph.com/.api/graphql?EvaluateFeatureFlag
      response:
        content:
          mimeType: application/json
          size: 38
          text: '{"data":{"evaluateFeatureFlag":false}}'
        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: application/json
          - name: content-length
            value: "38"
          - name: connection
            value: close
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 50b031b05a8f064cbb7c320d4adb6bdc
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token REDACTED
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "208"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |2
              
                  query EvaluateFeatureFlag($flagName: String!) {
                      evaluateFeatureFlag(flagName: $flagName)
                  }
            variables:
              flagName: cody-autocomplete-disable-recycling-of-previous-requests
        queryString:
          - name: EvaluateFeatureFlag
            value: null
        url: https://sourcegraph.com/.api/graphql?EvaluateFeatureFlag
      response:
        content:
          mimeType: application/json
          size: 38
          text: '{"data":{"evaluateFeatureFlag":false}}'
        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: application/json
          - name: content-length
            value: "38"
          - name: connection
            value: close
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 2bbf280183fdae3c39a73013105339ae
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token REDACTED
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "199"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |2
              
                  query EvaluateFeatureFlag($flagName: String!) {
                      evaluateFeatureFlag(flagName: $flagName)
                  }
            variables:
              flagName: cody-autocomplete-dynamic-multiline-completions
        queryString:
          - name: EvaluateFeatureFlag
            value: null
        url: https://sourcegraph.com/.api/graphql?EvaluateFeatureFlag
      response:
        content:
          mimeType: application/json
          size: 38
          text: '{"data":{"evaluateFeatureFlag":false}}'
        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: application/json
          - name: content-length
            value: "38"
          - name: connection
            value: close
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 7449140909c921a511332d4c1de94c1f
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token REDACTED
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "182"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |2
              
                  query EvaluateFeatureFlag($flagName: String!) {
                      evaluateFeatureFlag(flagName: $flagName)
                  }
            variables:
              flagName: cody-autocomplete-user-latency
        queryString:
          - name: EvaluateFeatureFlag
            value: null
        url: https://sourcegraph.com/.api/graphql?EvaluateFeatureFlag
      response:
        content:
          mimeType: application/json
          size: 37
          text: '{"data":{"evaluateFeatureFlag":null}}'
        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: application/json
          - name: content-length
            value: "37"
          - name: connection
            value: close
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: cc9b1f585edf9183417f56a2c258ba17
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token REDACTED
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "147"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |2
              
                  query FeatureFlags {
                      evaluatedFeatureFlags() {
                          name
                          value
                        }
                  }
            variables: {}
        queryString:
          - name: FeatureFlags
            value: null
        url: https://sourcegraph.com/.api/graphql?FeatureFlags
      response:
        content:
          encoding: base64
          mimeType: application/json
          size: 760
          text: '["H4sIAAAAAAAA/5RVUW7rOAy8i7/LC+QAvcRiP2hpYnMjSy5JJfEWvfuD3OKh7Xu2m78AHg2HQ3Ly2kV27k6vHa6cKjviM9ir4jnxYN3pn9cu84Tu1IUSF+LqJZRpTnBQXDJPEmiqySVJBn18kpKte+oaI7rTmZPh7WmHKJTsuDv154EmuSM+8jjizDU5mbOGEqE0Lr3KJw7X+pnCwBrG96LZqWdDpMR5oAhHaOoP6t/Qk0lEz7pZZQXOWvYBuM9QmZCd0z7yS8+uHCQPD9kkxn0CKcISkuSByplmxVVKNVK8VJjvTI3jJJk4c1pcghFyozt0OaKvRzqbnZwO+m8gRPGirQWZYcf4MLIfDoj+g/fKkg8IGxlNJVzIYdu0H31n3OiC5VZ0Z5k/sMr58mWaf6eUPFcnG8uNRjEvujywMW2/Kw/thyOH7afKDS2TuBHuAYiIdC66dr27c30qPc2tht3Ew0isYGuC1UP1A3t/dNNkpWrAoDyP20JeqoTL+tbJS9VVPlcfkV1CyziqBn1g2QOH8fcJHQ/0IIBmLbEGJ6u9BZV5zUsy6FUCiEMoNfuOuJ6uYuslrN3dxEfKxdGXctl3+UFJCm7e/1xZCDCTFjNnSS2mgO2tliHXmazqFcufcfKd25EwwXXNzKLbBzjoHI5Oqdwy1EaZN4HveshcwVNLy0Gc+tQ+bhucXdn8/V9QODvZkp3vNMowJhnG/ftpwun/gsv33v59e/sVAAD//+dsoHqoBwAA"]'
          textDecoded:
            data:
              evaluatedFeatureFlags:
                - name: cody-autocomplete-dynamic-multiline-completions
                  value: false
                - name: cody-autocomplete-context-bfg-mixed
                  value: false
                - name: cody-autocomplete-default-starcoder-hybrid
                  value: true
                - name: search-content-based-lang-detection
                  value: false
                - name: cody-web-sidebar
                  value: true
                - name: cody-pro
                  value: true
                - name: cody-experimental
                  value: true
                - name: cody-autocomplete-tracing
                  value: false
                - name: cody-autocomplete-disable-recycling-of-previous-requests
                  value: false
                - name: admin-analytics-enabled
                  value: true
                - name: search-debug
                  value: false
                - name: cody-web-all
                  value: true
                - name: cody-web-editor-recipes
                  value: true
                - name: cody-web-chat
                  value: true
                - name: cody-pro-jetbrains
                  value: true
                - name: cody-chat-mock-test
                  value: true
                - name: search-new-keyword
                  value: false
                - name: search-ranking
                  value: true
                - name: search-input-show-history
                  value: true
                - name: cody-autocomplete-language-latency
                  value: true
                - name: rate-limits-exceeded-for-testing
                  value: false
                - name: blob-page-switch-areas-shortcuts
                  value: true
                - name: cody-autocomplete-default-starcoder-hybrid-sourcegraph
                  value: false
                - name: quick-start-tour-for-authenticated-users
                  value: false
                - name: admin-analytics-cache-disabled
                  value: false
                - name: search-hybrid
                  value: true
                - name: product-subscriptions-service-account
                  value: false
                - name: ab-visitor-tour-with-notebooks
                  value: true
                - name: cody
                  value: true
                - name: product-subscriptions-reader-service-account
                  value: false
                - name: accessible-file-tree
                  value: true
                - name: signup-survey-enabled
                  value: false
                - name: telemetry-export
                  value: true
                - name: grpc
                  value: true
                - name: search-ownership
                  value: true
                - name: enable-streaming-git-blame
                  value: true
                - name: contrast-compliant-syntax-highlighting
                  value: false
                - name: grpc-zoekt
                  value: true
        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: content-encoding
            value: gzip
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: d7720d62932d2de21ea1f187e1bf5135
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token REDACTED
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "734"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: >-
              
              mutation LogEventMutation($event: String!, $userCookieID: String!, $url: String!, $source: EventSource!, $argument: String, $publicArgument: String, $client: String, $connectedSiteID: String, $hashedLicenseKey: String) {
                  logEvent(
              		event: $event
              		userCookieID: $userCookieID
              		url: $url
              		source: $source
              		argument: $argument
              		publicArgument: $publicArgument
              		client: $client
              		connectedSiteID: $connectedSiteID
              		hashedLicenseKey: $hashedLicenseKey
                  ) {
              		alwaysNil
              	}
              }
            variables:
              client: VSCODE_CODY_EXTENSION
              connectedSiteID: SourcegraphWeb
              event: CodyVSCodeExtension:Auth:connected
              source: IDEEXTENSION
              url: ""
              userCookieID: ANONYMOUS_USER_COOKIE_ID
        queryString:
          - name: LogEventMutation
            value: null
        url: https://sourcegraph.com/.api/graphql?LogEventMutation
      response:
        content:
          mimeType: application/json
          size: 26
          text: '{"data":{"logEvent":null}}'
        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: application/json
          - name: content-length
            value: "26"
          - name: connection
            value: close
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: f2ad82c29e307a41faf523ab25033ae0
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token REDACTED
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "731"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: >-
              
              mutation LogEventMutation($event: String!, $userCookieID: String!, $url: String!, $source: EventSource!, $argument: String, $publicArgument: String, $client: String, $connectedSiteID: String, $hashedLicenseKey: String) {
                  logEvent(
              		event: $event
              		userCookieID: $userCookieID
              		url: $url
              		source: $source
              		argument: $argument
              		publicArgument: $publicArgument
              		client: $client
              		connectedSiteID: $connectedSiteID
              		hashedLicenseKey: $hashedLicenseKey
                  ) {
              		alwaysNil
              	}
              }
            variables:
              client: VSCODE_CODY_EXTENSION
              connectedSiteID: SourcegraphWeb
              event: CodyVSCodeExtension:Auth:failed
              source: IDEEXTENSION
              url: ""
              userCookieID: ANONYMOUS_USER_COOKIE_ID
        queryString:
          - name: LogEventMutation
            value: null
        url: https://sourcegraph.com/.api/graphql?LogEventMutation
      response:
        content:
          mimeType: application/json
          size: 26
          text: '{"data":{"logEvent":null}}'
        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: application/json
          - name: content-length
            value: "26"
          - name: connection
            value: close
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: fa14556b8a98cd3158e1f395bbfae82b
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token REDACTED
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "753"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: >-
              
              mutation LogEventMutation($event: String!, $userCookieID: String!, $url: String!, $source: EventSource!, $argument: String, $publicArgument: String, $client: String, $connectedSiteID: String, $hashedLicenseKey: String) {
                  logEvent(
              		event: $event
              		userCookieID: $userCookieID
              		url: $url
              		source: $source
              		argument: $argument
              		publicArgument: $publicArgument
              		client: $client
              		connectedSiteID: $connectedSiteID
              		hashedLicenseKey: $hashedLicenseKey
                  ) {
              		alwaysNil
              	}
              }
            variables:
              client: VSCODE_CODY_EXTENSION
              connectedSiteID: SourcegraphWeb
              event: CodyVSCodeExtension:completion:unexpectedNotSuggested
              source: IDEEXTENSION
              url: ""
              userCookieID: ANONYMOUS_USER_COOKIE_ID
        queryString:
          - name: LogEventMutation
            value: null
        url: https://sourcegraph.com/.api/graphql?LogEventMutation
      response:
        content:
          mimeType: application/json
          size: 26
          text: '{"data":{"logEvent":null}}'
        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: application/json
          - name: content-length
            value: "26"
          - name: connection
            value: close
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: c4f40aca2c2674f1a13bea041aae71e9
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token REDACTED
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "739"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: >-
              
              mutation LogEventMutation($event: String!, $userCookieID: String!, $url: String!, $source: EventSource!, $argument: String, $publicArgument: String, $client: String, $connectedSiteID: String, $hashedLicenseKey: String) {
                  logEvent(
              		event: $event
              		userCookieID: $userCookieID
              		url: $url
              		source: $source
              		argument: $argument
              		publicArgument: $publicArgument
              		client: $client
              		connectedSiteID: $connectedSiteID
              		hashedLicenseKey: $hashedLicenseKey
                  ) {
              		alwaysNil
              	}
              }
            variables:
              client: VSCODE_CODY_EXTENSION
              connectedSiteID: SourcegraphWeb
              event: CodyVSCodeExtension:completion:accepted
              source: IDEEXTENSION
              url: ""
              userCookieID: ANONYMOUS_USER_COOKIE_ID
        queryString:
          - name: LogEventMutation
            value: null
        url: https://sourcegraph.com/.api/graphql?LogEventMutation
      response:
        content:
          mimeType: application/json
          size: 26
          text: '{"data":{"logEvent":null}}'
        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: application/json
          - name: content-length
            value: "26"
          - name: connection
            value: close
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: c63cf23de38703e896ef70b35a6908a4
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token REDACTED
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "342"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |
              
              mutation RecordTelemetryEvents($events: [TelemetryEventInput!]!) {
              	telemetry {
              		recordEvents(events: $events) {
              			alwaysNil
              		}
              	}
              }
            variables:
              events:
                - action: connected
                  feature: cody.auth
                  parameters:
                    privateMetadata: {}
                    version: 0
                  source:
                    client: VSCode.Cody
                    clientVersion: 1.0.5
        queryString:
          - name: RecordTelemetryEvents
            value: null
        url: https://sourcegraph.com/.api/graphql?RecordTelemetryEvents
      response:
        content:
          encoding: base64
          mimeType: application/json
          size: 119
          text: '["H4sIAAAAAAAAA6pWSkksSVSyqlYqSc1JzU0tKaoEcYpSk/OLUlzLUvNKikH8xJzyxMpiv8wcJau80pyc2traWgAAAAD//w==","AwCEdn1qOgAAAA=="]'
        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: ec06b949e0d75e4eb04074a0df35dff6
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token REDACTED
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "339"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |
              
              mutation RecordTelemetryEvents($events: [TelemetryEventInput!]!) {
              	telemetry {
              		recordEvents(events: $events) {
              			alwaysNil
              		}
              	}
              }
            variables:
              events:
                - action: failed
                  feature: cody.auth
                  parameters:
                    privateMetadata: {}
                    version: 0
                  source:
                    client: VSCode.Cody
                    clientVersion: 1.0.5
        queryString:
          - name: RecordTelemetryEvents
            value: null
        url: https://sourcegraph.com/.api/graphql?RecordTelemetryEvents
      response:
        content:
          encoding: base64
          mimeType: application/json
          size: 112
          text: '["H4sIAAAAAAAAA6pWSkksSVSyqlYqSc1JzU0tKaoEcYpSk/OLUlzLUvNKikH8xJzyxMpiv8wcJau80pyc2traWgAAAAD//wMAhHZ9ajoAAAA="]'
          textDecoded:
            data:
              telemetry:
                recordEvents:
                  alwaysNil: null
        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 2ef7fccc71a44596d2ffab65eca5f035
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token REDACTED
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "361"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |
              
              mutation RecordTelemetryEvents($events: [TelemetryEventInput!]!) {
              	telemetry {
              		recordEvents(events: $events) {
              			alwaysNil
              		}
              	}
              }
            variables:
              events:
                - action: unexpectedNotSuggested
                  feature: cody.completion
                  parameters:
                    privateMetadata: {}
                    version: 0
                  source:
                    client: VSCode.Cody
                    clientVersion: 1.0.5
        queryString:
          - name: RecordTelemetryEvents
            value: null
        url: https://sourcegraph.com/.api/graphql?RecordTelemetryEvents
      response:
        content:
          encoding: base64
          mimeType: application/json
          size: 112
          text: '["H4sIAAAAAAAAA6pWSkksSVSyqlYqSc1JzU0tKaoEcYpSk/OLUlzLUvNKikH8xJzyxMpiv8wcJau80pyc2traWgAAAAD//wMAhHZ9ajoAAAA="]'
          textDecoded:
            data:
              telemetry:
                recordEvents:
                  alwaysNil: null
        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 3b9f0cc55d63ad6a017ac63464de0a20
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token REDACTED
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "347"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |
              
              mutation RecordTelemetryEvents($events: [TelemetryEventInput!]!) {
              	telemetry {
              		recordEvents(events: $events) {
              			alwaysNil
              		}
              	}
              }
            variables:
              events:
                - action: accepted
                  feature: cody.completion
                  parameters:
                    privateMetadata: {}
                    version: 0
                  source:
                    client: VSCode.Cody
                    clientVersion: 1.0.5
        queryString:
          - name: RecordTelemetryEvents
            value: null
        url: https://sourcegraph.com/.api/graphql?RecordTelemetryEvents
      response:
        content:
          encoding: base64
          mimeType: application/json
          size: 112
          text: '["H4sIAAAAAAAAA6pWSkksSVSyqlYqSc1JzU0tKaoEcYpSk/OLUlzLUvNKikH8xJzyxMpiv8wcJau80pyc2traWgAAAAD//wMAhHZ9ajoAAAA="]'
          textDecoded:
            data:
              telemetry:
                recordEvents:
                  alwaysNil: null
        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 1a71934de7e17499fc6950eb40367602
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token REDACTED
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "360"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |
              
              mutation RecordTelemetryEvents($events: [TelemetryEventInput!]!) {
              	telemetry {
              		recordEvents(events: $events) {
              			alwaysNil
              		}
              	}
              }
            variables:
              events:
                - action: recipe-used
                  feature: cody.recipe.chat-question
                  parameters:
                    privateMetadata: {}
                    version: 0
                  source:
                    client: VSCode.Cody
                    clientVersion: 1.0.5
        queryString:
          - name: RecordTelemetryEvents
            value: null
        url: https://sourcegraph.com/.api/graphql?RecordTelemetryEvents
      response:
        content:
          encoding: base64
          mimeType: application/json
          size: 119
          text: '["H4sIAAAAAAAAA6pWSkksSVSyqlYqSc1JzU0tKaoEcYpSk/OLUlzLUvNKikH8xJzyxMpiv8wcJau80pyc2traWgAAAAD//w==","AwCEdn1qOgAAAA=="]'
        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: e455862587078970fe60174ad1452e99
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token REDACTED
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "352"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |
              
              mutation RecordTelemetryEvents($events: [TelemetryEventInput!]!) {
              	telemetry {
              		recordEvents(events: $events) {
              			alwaysNil
              		}
              	}
              }
            variables:
              events:
                - action: hasCode
                  feature: cody.chatResponse.new
                  parameters:
                    privateMetadata: {}
                    version: 0
                  source:
                    client: VSCode.Cody
                    clientVersion: 1.0.5
        queryString:
          - name: RecordTelemetryEvents
            value: null
        url: https://sourcegraph.com/.api/graphql?RecordTelemetryEvents
      response:
        content:
          encoding: base64
          mimeType: application/json
          size: 112
          text: '["H4sIAAAAAAAAA6pWSkksSVSyqlYqSc1JzU0tKaoEcYpSk/OLUlzLUvNKikH8xJzyxMpiv8wcJau80pyc2traWgAAAAD//wMAhHZ9ajoAAAA="]'
          textDecoded:
            data:
              telemetry:
                recordEvents:
                  alwaysNil: null
        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: f8951b1429c774d692bea21c67602015
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token REDACTED
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "189"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query Repository($name: String!) {
              	repository(name: $name) {
                              id
                              embeddingExists
              	}
              }
            variables:
              name: github.com/sourcegraph/cody
        queryString:
          - name: Repository
            value: null
        url: https://sourcegraph.com/.api/graphql?Repository
      response:
        content:
          encoding: base64
          mimeType: application/json
          size: 148
          text: '["H4sIAAAAAAAAA6pWSkksSVSyqlYqSi3IL84syS+qBPEyU5SslEJzw8qTjP0KUtwtK1ND8o18Q3wr/UJ8K/0dbW2VdJRSc5NSU1Iy89JdKzKLS4qVrEqKSlNra2sBAAAA//8DAP+HlYJUAAAA"]'
          textDecoded:
            data:
              repository:
                embeddingExists: true
                id: UmVwb3NpdG9yeTo2MTMyNTMyOA==
        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 72193840b9935c6cf7c7a9606eac4c6e
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token REDACTED
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "144"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query Repository($name: String!) {
              	repository(name: $name) {
              		id
              	}
              }
            variables:
              name: github.com/sourcegraph/cody
        queryString:
          - name: Repository
            value: null
        url: https://sourcegraph.com/.api/graphql?Repository
      response:
        content:
          encoding: base64
          mimeType: application/json
          size: 120
          text: '["H4sIAAAAAAAAA6pWSkksSVSyqlYqSi3IL84syS+qBPEyU5SslEJzw8qTjP0KUtwtK1ND8o18Q3wr/UJ8K/0dbW2VamtrAQAAAP//AwDHAhygPQAAAA=="]'
          textDecoded:
            data:
              repository:
                id: UmVwb3NpdG9yeTo2MTMyNTMyOA==
        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: d0677a3181c3b4ee74acabaadc1dc934
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token REDACTED
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "164"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query SiteIdentification {
              	site {
              		siteID
              		productSubscription {
              			license {
              				hashedKey
              			}
              		}
              	}
              }
            variables: {}
        queryString:
          - name: SiteIdentification
            value: null
        url: https://sourcegraph.com/.api/graphql?SiteIdentification
      response:
        content:
          encoding: base64
          mimeType: application/json
          size: 212
          text: '["H4sIAAAAAAAAAzTLsQ6CMBCA4Xe52aGFcrbMLoaRwfnuekgTA6QtgyG+u8HEf/mn74BIlaA/oKSq/99v0MO47ln0mWmbH8pwgS2vcZc67lwkp62mdTnBK4ku5WdnKrPGQd/QA0cfsONGdWoJLTs1HborOWNNgwZRvLcWxXfBkRFr2ASZuPUc1CIG+Jx9AQAA//8DAGHOuFqgAAAA"]'
          textDecoded:
            data:
              site:
                productSubscription:
                  license:
                    hashedKey: bd8965b2eef3a61b4e05647a401026066c88116c8594a0c10b09cfb38b9e1669
                siteID: SourcegraphWeb
        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
    - _id: 1234fcdcc45995910ae0218be6622d91
      _order: 0
      cache: {}
      request:
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token REDACTED
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultClient / v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "101"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - _fromType: array
            name: connection
            value: close
          - name: host
            value: sourcegraph.com
        headersSize: 0
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query SiteProductVersion {
                  site {
                      productVersion
                  }
              }
            variables: {}
        queryString:
          - name: SiteProductVersion
            value: null
        url: https://sourcegraph.com/.api/graphql?SiteProductVersion
      response:
        content:
          encoding: base64
          mimeType: application/json
          size: 136
          text: '["H4sIAAAAAAAAA6pWSkksSVSyqlYqzixJBdEFRfkppcklYalFxZn5eUpWSkamZhaGFvFGBkYmugaGugZm8aZ6RrqWiSZppkbJKSZGhilKtbW1AAAAAP//AwCkSWFZSQAAAA=="]'
          textDecoded:
            data:
              site:
                productVersion: 256818_2024-01-06_5.2-9a4f52cd421d
        cookies: []
        headers:
          - name: date
            value: Fri, 05 Jan 2024 11:11:11 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: retry-after
            value: "0"
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 0
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: Fri, 05 Jan 2024 00:00:00 GMT
      time: 0
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 0
  pages: []
  version: "1.2"
