// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Document Code > commands/document (Function within a property) 1`] = `
"const foo = 42
export const TestLogger = {
    startLogging: () => {
        // Do some stuff

        /**
         * Records a log message.
         */
        function recordLog() {
            console.log(/* CURSOR */ 'Recording the log')
        }

        recordLog()
    },
}
"
`;

exports[`Document Code > commands/document (Kotlin class name) 1`] = `
"/**
 * Represents a greeting that can be displayed to the user.
 */
class He/* CURSOR */llo {
    fun greeting(): String {
        return "Hello, world!"
    }
}
"
`;

exports[`Document Code > commands/document (Method as part of a class) 1`] = `
"const foo = 42
// Should be present in the LLM prompt
const longPrefix = \`
    longPrefix content
    longPrefix content
    longPrefix content
    longPrefix content
    longPrefix content
    longPrefix content
    longPrefix content
\`

export class TestClass {
    constructor(private shouldGreet: boolean) {}

    /**
     * Logs a 'Hello World!' message to the console if \`shouldGreet\` is true.
     */
    public functionName() {
        if (this.shouldGreet) {
            console.log(/* CURSOR */ 'Hello World!')
        }
    }
}

// Should be present in the LLM prompt
const longSuffix = \`
    longSuffix content
    longSuffix content
    longSuffix content
    longSuffix content
    longSuffix content
    longSuffix content
    longSuffix content
\`
"
`;

exports[`Document Code > commands/document (nested test case) 1`] = `
"import { expect } from 'vitest'
import { it } from 'vitest'
import { describe } from 'vitest'

describe('test block', () => {
    it('does 1', () => {
        expect(true).toBe(true)
    })

    it('does 2', () => {
        expect(true).toBe(true)
    })

    it('does something else', () => {
        // This line will error due to incorrect usage of \`performance.now\`
        /**
         * Records the current time using the \`performance.now()\` function.
         * This can be useful for measuring the duration of operations or code sections.
         */
        const startTime = performance.now(/* CURSOR */)
    })
})
"
`;

exports[`Document Code > editCommands/document (basic function) 1`] = `
"/**
 * Adds two numbers together and returns the result.
 * 
 * @param a - The first number to add.
 * @param b - The second number to add.
 * @returns The sum of the two input numbers.
 */
export function sum(a: number, b: number): number {
    /* CURSOR */
}
"
`;
